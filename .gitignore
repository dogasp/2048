

int cx, nb_evo = 0, z = 1;
for (int j = 0; j < gridSize; j ++){
    for (int i = gridSize-1; i >= 0; i--){
        z = 1;
        while (1){
          printf("%d %d\n", z, i  );
            if (i-z>-1){
              if (grid[i-z][j] != grid[i][j] && grid[i-z][j] != 0)
                {
                  break;
                }
              if (grid[i][j] == grid[i-z][j] && grid[i][j]!=0)
                {
                  grid[i][j] = grid[i][j]*2 ;
                  grid[i-z][j] = 0;
                  nb_evo = 1;
                  break;
                }
              else {
                  z++;
                }
              }
            else break;
        }
      }
    }
for (int j = 0; j < gridSize; j ++){
    for (int i = gridSize-2; i > -1; i --){
        cx = i;
        while (1){
            if(grid[cx][j] != 0 && grid[cx+1][j] == 0){
                grid[cx+1][j] = grid[cx][j];
                grid[cx][j] = 0;
                nb_evo = 1;
                }
            else break;
            cx ++;
            if (cx == gridSize) break;
        }
    }
}
return nb_evo;
}
